<?xml version="1.0" encoding="UTF-8"?>
<!-- | deployerConfigContext.xml centralizes into one file some of the declarative 
	configuration that | all CAS deployers will need to modify. | | This file 
	declares some of the Spring-managed JavaBeans that make up a CAS deployment. 
	| The beans declared in this file are instantiated at context initialization 
	time by the Spring | ContextLoaderListener declared in web.xml. It finds 
	this file because this | file is among those declared in the context parameter 
	"contextConfigLocation". | | By far the most common change you will need 
	to make in this file is to change the last bean | declaration to replace 
	the default SimpleTestUsernamePasswordAuthenticationHandler with | one implementing 
	your approach for authenticating usernames and passwords. + -->

<!-- ~ Licensed to Jasig under one or more contributor license ~ agreements. 
	See the NOTICE file distributed with this work ~ for additional information 
	regarding copyright ownership. ~ Jasig licenses this file to you under the 
	Apache License, ~ Version 2.0 (the "License"); you may not use this file 
	~ except in compliance with the License. You may obtain a ~ copy of the License 
	at the following location: ~ ~ http://www.apache.org/licenses/LICENSE-2.0 
	~ ~ Unless required by applicable law or agreed to in writing, ~ software 
	distributed under the License is distributed on an ~ "AS IS" BASIS, WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY ~ KIND, either express or implied. See the 
	License for the ~ specific language governing permissions and limitations 
	~ under the License. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<!-- | This bean declares our AuthenticationManager. The CentralAuthenticationService 
		service bean | declared in applicationContext.xml picks up this AuthenticationManager 
		by reference to its id, | "authenticationManager". Most deployers will be 
		able to use the default AuthenticationManager | implementation and so do 
		not need to change the class of this bean. We include the whole | AuthenticationManager 
		here in the userConfigContext.xml so that you can see the things you will 
		| need to change in context. + -->
	<bean id="authenticationManager" class="org.jasig.cas.authentication.AuthenticationManagerImpl">

		<property name="authenticationMetaDataPopulators">
			<list>
				<bean class="com.oauth.action.CusOAuthAuthenticationMetaDataPopulator" />
			</list>
		</property>

		<property name="credentialsToPrincipalResolvers">
			<list>
				<bean
					class="org.jasig.cas.support.oauth.authentication.principal.OAuthCredentialsToPrincipalResolver">
				</bean>

				<bean
					class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" />

				<bean
					class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
			</list>
		</property>

		<property name="authenticationHandlers">
			<list>
				<bean class="com.oauth.action.CusOAuthAuthenticationHandler">
					<property name="personDao" ref="personDao"></property>
					<property name="providers">
						<list>
							<ref bean="qq" />
							<ref bean="weixin" />
						</list>
					</property>
				</bean>

				<bean
					class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
					p:httpClient-ref="httpClient" p:requireSecure="false" />

				<ref bean="ldapAuthenticationHandler" />

			</list>
		</property>
	</bean>


	<bean id="ldapAuthenticationHandler"
		class="org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler">
		<property name="filter" value="uid=%u" />
		<property name="searchBase" value="ou=people,dc=gvsun,dc=net" />
		<property name="contextSource" ref="contextSource" />
	</bean>

	<bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="pooled" value="false" />
		<property name="urls">
			<list>
				<value>ldap://192.168.1.41:389</value>
			</list>
		</property>
		<property name="userDn" value="uid=admin,dc=gvsun,dc=net" />
		<property name="password" value="gengshang" />
		<property name="baseEnvironmentProperties">
			<map>
				<entry>
					<key>
						<value>java.naming.security.authentication</value>
					</key>
					<value>simple</value>
				</entry>
			</map>
		</property>
	</bean>




	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<constructor-arg ref="contextSource" />
	</bean>

	<bean id="personDao" class="com.oauth.dao.PersonDao">
		<property name="ldapTemplate" ref="ldapTemplate"></property>
	</bean>

	<bean id="qqCheckAndBindAction" class="com.oauth.action.QQCheckAndBindAction">
		<property name="personDao" ref="personDao"></property>
		<property name="ldapAuthenticationHandler" ref="ldapAuthenticationHandler"></property>
	</bean>


	<!-- This bean defines the security roles for the Services Management application. 
		Simple deployments can use the in-memory version. More robust deployments 
		will want to use another option, such as the Jdbc version. The name of this 
		should remain "userDetailsService" in order for Spring Security to find it. -->
	<!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" 
		/> -->

	<sec:user-service id="userDetailsService">
		<sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused"
			authorities="ROLE_ADMIN" />
	</sec:user-service>

	<!-- Bean that defines the attributes that a service may return. This example 
		uses the Stub/Mock version. A real implementation may go against a database 
		or LDAP server. The id should remain "attributeRepository" though. -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.StubPersonAttributeDao">
		<property name="backingMap">
			<map>
				<entry key="uid" value="uid" />
				<entry key="eduPersonAffiliation" value="eduPersonAffiliation" />
				<entry key="groupMembership" value="groupMembership" />
			</map>
		</property>
	</bean>

	<!-- Sample, in-memory data store for the ServiceRegistry. A real implementation 
		would probably want to replace this with the JPA-backed ServiceRegistry DAO 
		The name of this bean should remain "serviceRegistryDao". -->
	<bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
		<property name="registeredServices">
			<list>
				<bean class="org.jasig.cas.services.RegexRegisteredService">
					<property name="id" value="0" />
					<property name="name" value="HTTP and IMAP" />
					<property name="description" value="Allows HTTP(S) and IMAP(S) protocols" />
					<property name="serviceId" value="^(https?|imaps?)://.*" />
					<property name="evaluationOrder" value="10000001" />
					<property name="allowedAttributes">
						<list>
							<value>uid</value>
							<value>username</value>
						</list>
					</property>
				</bean>
				<!-- Use the following definition instead of the above to further restrict 
					access to services within your domain (including subdomains). Note that example.com 
					must be replaced with the domain you wish to permit. -->
				<!-- <bean class="org.jasig.cas.services.RegexRegisteredService"> <property 
					name="id" value="1" /> <property name="name" value="HTTP and IMAP on example.com" 
					/> <property name="description" value="Allows HTTP(S) and IMAP(S) protocols 
					on example.com" /> <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" 
					/> <property name="evaluationOrder" value="0" /> </bean> -->
			</list>
		</property>
	</bean>

	<bean id="auditTrailManager"
		class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
		<property name="monitors">
			<list>
				<bean class="org.jasig.cas.monitor.MemoryMonitor"
					p:freeMemoryWarnThreshold="10" />
				<!-- NOTE The following ticket registries support SessionMonitor: * DefaultTicketRegistry 
					* JpaTicketRegistry Remove this monitor if you use an unsupported registry. -->
				<bean class="org.jasig.cas.monitor.SessionMonitor"
					p:ticketRegistry-ref="ticketRegistry"
					p:serviceTicketCountWarnThreshold="5000"
					p:sessionCountWarnThreshold="100000" />
			</list>
		</property>
	</bean>



</beans>
